implement buy/sell Fixed
  color input field dependent on evaluation

add arguments/parameter
coin
buy/sell price
disable sanity check

sanity check function
periodically recheck

cap input lenght:
if len(input) > 10
  input[:1]

validate order size:
buy: GOOD if > minsize and < maxsize (enough btcHoldings)
      OK if > minsize
else BAD

sell: GOOD if >= minsize and <= maxsize
        OK if > minsize
else   BAD

fix trades/ trades per minute

implement indicators for current position and recent trades in history

get last (meaningful) buy/sell

info panel: smallest possible order size 1$ = wv coins; 1 coin = wv dollars

compare time of last x orders; time between last buy/sell:
get last trade, check if quantity is meaningful, iterate through list find first opposite trade, compare timestamps

different spreads:
order book spread
trade histoy spread
current buy/sell price last buy/sell

finish order history
separate api call
store value

while tradeid = WAITING:
every x sec make new call and compare
if values differ:
  restart self

  https://blog.petrzemek.net/2014/03/23/restarting-a-python-script-within-itself/

clean up messy code

kline analyzer f체r ratschl채ge/ dynamic buy/sell limits

write setup.py

second form: overview
grid with btc pairs
spread
volume
diff to high low

tab completion on coin input


condition check function
returns true if all conditions are met

choose from different behaviors:
1 static price limit

2 spreadbot

3


hotkey f체r start /stop bot

display values:

* volume
* daily high / low

loading indicator: advance one stop on every callback

split apart application further: apiFunctions.py, initialize.py

limit number of decimal places on order input (price and size)

hotkeys: capture hotkeys S and R while on buy/sell selector or numeric input forms

calculate RSI and possibly other indicators

fix naming conventions

trade analysis:
https://github.com/jealous/stockstats
get kline data, transform into correct format, export csv or pass to stockstats, get results, display in npyscreen Form

round indicator values to correct decimal place

algo bot:
access previous candle data (prev closing)
start websocket for selected timeframe


Fragen: soll bot detecten ob bands zu narrow sind?

####
short term TODO

1. Fix interface

add order book, history, fix history, rename variables (fillList)

choose time interval --> reflect change

clean up ui

show btc / coin balance btc gain since running

implement hotkeys

2. finalise first bot buy/sell LOGIC
variable order size (25 or less)

close orders on exit

3. log filled orders create Quittung

----
berechnungen mit price targets:

check ob man auf oder direkt hinter ner fedden dicken wall sitzt

fail safe mechanisms:
nie in orders rein shoppen

Idee: twitter anbindung: Bot twittert trades

sei der n채chstbilligste ab wert x

for i in bids/ask length
  if bids price < pricetarget and bids price not myOrder:
      myBuyOrderPrice = bids[i][0] + EINSAT

0% input should be possible

create order in queue
BUG: multiple orders

aggroSELL einrichten



if my order = targetprice:
  check distance to next order (satCheck)
  (iterate through bids or asks until order = myorder)
   recreate if > 2 tix
